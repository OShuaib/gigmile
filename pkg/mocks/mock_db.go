// Code generated by MockGen. DO NOT EDIT.
// Source: gigmile/pkg/database (interfaces: DB)

// Package mocks is a generated GoMock package.
package mocks

import (
	model "gigmile/pkg/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDB is a mock of DB interface.
type MockDB struct {
	ctrl     *gomock.Controller
	recorder *MockDBMockRecorder
}

// MockDBMockRecorder is the mock recorder for MockDB.
type MockDBMockRecorder struct {
	mock *MockDB
}

// NewMockDB creates a new mock instance.
func NewMockDB(ctrl *gomock.Controller) *MockDB {
	mock := &MockDB{ctrl: ctrl}
	mock.recorder = &MockDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDB) EXPECT() *MockDBMockRecorder {
	return m.recorder
}

// CreateCountry mocks base method.
func (m *MockDB) CreateCountry(arg0 *model.Country) (*model.Country, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCountry", arg0)
	ret0, _ := ret[0].(*model.Country)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCountry indicates an expected call of CreateCountry.
func (mr *MockDBMockRecorder) CreateCountry(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCountry", reflect.TypeOf((*MockDB)(nil).CreateCountry), arg0)
}

// FindCountryByID mocks base method.
func (m *MockDB) FindCountryByID(arg0 string) (*model.Country, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindCountryByID", arg0)
	ret0, _ := ret[0].(*model.Country)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindCountryByID indicates an expected call of FindCountryByID.
func (mr *MockDBMockRecorder) FindCountryByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindCountryByID", reflect.TypeOf((*MockDB)(nil).FindCountryByID), arg0)
}

// GetCountries mocks base method.
func (m *MockDB) GetCountries() []model.Country {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCountries")
	ret0, _ := ret[0].([]model.Country)
	return ret0
}

// GetCountries indicates an expected call of GetCountries.
func (mr *MockDBMockRecorder) GetCountries() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCountries", reflect.TypeOf((*MockDB)(nil).GetCountries))
}

// UpdateCountry mocks base method.
func (m *MockDB) UpdateCountry(arg0 string, arg1 map[string]interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCountry", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCountry indicates an expected call of UpdateCountry.
func (mr *MockDBMockRecorder) UpdateCountry(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCountry", reflect.TypeOf((*MockDB)(nil).UpdateCountry), arg0, arg1)
}
